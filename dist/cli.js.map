{"version":3,"sources":["../src/cli.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { program } from 'commander';\nimport fsSync from 'node:fs';\nimport { join } from 'node:path';\nimport supabaseToZod, { supabaseToZodOptionsSchema } from './supabase-to-zod';\nimport * as url from 'url';\n\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\nconst defaultPackageJsonPath = join(__dirname, 'package.json');\nconst packageJsonPath = fsSync.existsSync(defaultPackageJsonPath)\n  ? defaultPackageJsonPath\n  : join(__dirname, '../package.json');\n\nconst packageJson = JSON.parse(\n  fsSync.readFileSync(packageJsonPath, {}).toString()\n);\n\nprogram\n  .name(packageJson.name)\n  .version(packageJson.version)\n  .option('-i, --input <input>', 'Path to the types generated by supabase cli')\n  .option('-o, --output <output>', 'Path to the output file')\n  .option('-s, --schema [schema]', 'Specify schema', 'public')\n  .parse(process.argv);\nconst opts = supabaseToZodOptionsSchema.parse(program.opts());\nvoid (async () => {\n  try {\n    await supabaseToZod(opts);\n    process.exit();\n  } catch (error) {\n    console.error(error);\n    process.exit(1);\n  }\n})();\n"],"mappings":";;;;;;;AAEA,SAAS,eAAe;AACxB,OAAO,YAAY;AACnB,SAAS,YAAY;AAErB,YAAY,SAAS;AAErB,IAAM,YAAgB,kBAAc,IAAI,IAAI,KAAK,YAAY,GAAG,CAAC;AACjE,IAAM,yBAAyB,KAAK,WAAW,cAAc;AAC7D,IAAM,kBAAkB,OAAO,WAAW,sBAAsB,IAC5D,yBACA,KAAK,WAAW,iBAAiB;AAErC,IAAM,cAAc,KAAK;AAAA,EACvB,OAAO,aAAa,iBAAiB,CAAC,CAAC,EAAE,SAAS;AACpD;AAEA,QACG,KAAK,YAAY,IAAI,EACrB,QAAQ,YAAY,OAAO,EAC3B,OAAO,uBAAuB,6CAA6C,EAC3E,OAAO,yBAAyB,yBAAyB,EACzD,OAAO,yBAAyB,kBAAkB,QAAQ,EAC1D,MAAM,QAAQ,IAAI;AACrB,IAAM,OAAO,2BAA2B,MAAM,QAAQ,KAAK,CAAC;AAC5D,MAAM,YAAY;AAChB,MAAI;AACF,UAAM,cAAc,IAAI;AACxB,YAAQ,KAAK;AAAA,EACf,SAAS,OAAO;AACd,YAAQ,MAAM,KAAK;AACnB,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF,GAAG;","names":[]}